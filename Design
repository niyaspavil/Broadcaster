Design of Project: Broadcaster
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
on August 6, 2014
.......................................................................
About the app:::::::::::::::::
::::::::::::::::::::::::::::::
The Broadcaster application lets  a user to post to different networking sites with ease. This include connectivity to major social networks like Facebook, Twitter, etc , make Blog posts and Mailing facilities utilizing Gmail , Yahoo accounts based on the configured plug-ins.

 
.......................................................................
Design:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
The app will be organised in the following levels.

UI
Engine
Dispatcher
Config-Parser
Plug-ins
Let’s look into the functions of each layer…..

User Interface (UI):
	This part of the app will receive message to be posted and the channel list to which post is to be made.  This will also report events to user from underlying layers.  This layer will also accommodate the facility to query the user actions upon request by underlying layers.  Both GUI and command-line interface will be available.

Engine:
	This is the core part of the application which manages and monitors the activities of other components. The major functions of this layer include parse the user input and verify whether the service is available,  parallel invocation of dispatcher to post to each sites,  report status via UI,  request UI to get user decisions when needed,  encapsulates error messages from dispatcher and presents to UI in user friendly manner,  etc..

Dispatcher:
	This is the part of the application that communicates to the Internet.  This layer provides methods to connect to sites with different protocols.  This also reports the status to engine.  It is the function if dispatcher to load the plug-in for the site requested.
Config-Parser:
The Config-Parser will be the layer assisting engine to retrieve and set various configuration attributes and values.

Plug-ins:
	These are the plug-n-play python modules for individual sites to get operational access.  These modules generates rules for the dispatcher to access various sites.
 
......................................................................
The API:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

The Broadcaster API include following functions…

send_Broadcast(message,  channel_list)  –> status
		This function publishes the post message to each items in the channel_list if plug-in match is available.  Any case the function will return the status message in human readable string.  The status string constants will be available on the module itself on release.

get_Plugins() –> list_plugins
		This function retrieves the list of configured channels in the system.

set_Plugin(channel_name,  plugin_file[, overwrite_mode]) –> status
		This function links and configures the plugin_file with corresponding channel_name.  The optional overwrite_mode when “True” 	replace plug-in if an existing plug-in associated with channel_name.  The status returned will be similar as explained in send_Broadcast() method.

config_Plugin(channel_name[, attrib, value]) –> status
		This function helps to reconfigure channel_name associated plug-in.  The optional arguments helps to set a particular attribute-value to the plug-in.  The status returned will be similar as explained in send_Broadcast() method.

The API methods for plug-in developers is still in the design phase.

 
////////////////////////////////////////////////////////////////////////
Under the hood...
Gorbin
Niyas
Vinayak